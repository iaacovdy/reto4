# Base class for MenuItem
class MenuItem:
    def __init__(self, name, price):
        self._name = name
        self._price = price
    
    # Getter and Setter for 'name'
    def get_name(self):
        return self._name
    
    def set_name(self, name):
        self._name = name
    
    # Getter and Setter for 'price'
    def get_price(self):
        return self._price
    
    def set_price(self, price):
        if price >= 0:
            self._price = price
        else:
            print("Price cannot be negative.")
    
    def calculate_total(self):
        return self.get_price()


# Subclass for Beverage
class Beverage(MenuItem):
    def __init__(self, name, price, size='Medium'):
        super().__init__(name, price)
        self._size = size

    # Getter and Setter for 'size'
    def get_size(self):
        return self._size

    def set_size(self, size):
        self._size = size

    def calculate_total(self):
        # Adjust price based on size of the beverage
        size_multiplier = {'Small': 0.8, 'Medium': 1, 'Large': 1.2}
        return self.get_price() * size_multiplier.get(self.get_size(), 1)


# Subclass for Appetizer
class Appetizer(MenuItem):
    def __init__(self, name, price, spicy=False):
        super().__init__(name, price)
        self._spicy = spicy

    # Getter and Setter for 'spicy'
    def get_spicy(self):
        return self._spicy

    def set_spicy(self, spicy):
        self._spicy = spicy

    def calculate_total(self):
        # Add extra charge for spicy appetizer
        spicy_charge = 1.5 if self.get_spicy() else 0
        return self.get_price() + spicy_charge


# Subclass for MainCourse
class MainCourse(MenuItem):
    def __init__(self, name, price, vegetarian=False):
        super().__init__(name, price)
        self._vegetarian = vegetarian

    # Getter and Setter for 'vegetarian'
    def get_vegetarian(self):
        return self._vegetarian

    def set_vegetarian(self, vegetarian):
        self._vegetarian = vegetarian

    def calculate_total(self):
        # Apply discount for vegetarian main course
        vegetarian_discount = 0.1 if self.get_vegetarian() else 0
        return self.get_price() - (self.get_price() * vegetarian_discount)


# Class for managing the Order
class Order:
    def __init__(self):
        self.items = []
        self.discount = 0  # General discount for the entire order
    
    def add_item(self, item):
        self.items.append(item)

    def calculate_total(self):
        total = sum(item.calculate_total() for item in self.items)
        total -= self.discount
        return total

    def apply_discount(self, discount_percentage):
        # Apply a percentage discount on the entire order
        self.discount = (self.calculate_total() * discount_percentage) / 100

    def calculate_total_price(self):
        total_price = 0
        has_main_course = any(isinstance(item, MainCourse) for item in self.items)

        for item in self.items:
            total_price += item.calculate_total()
        
        # Apply special discount on beverages if main course is in the order
        if has_main_course:
            for item in self.items:
